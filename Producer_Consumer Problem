include <time.h>
#include <pthread.h>
static pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER;
static int avail = 0;
static void *
threadFunc(void *arg)
{ int cnt = atoi((char *) arg);
int s, j;
for (j = 0; j < cnt; j++) {
sleep(1);
/* Code to produce a unit omitted */
s = pthread_mutex_lock(&mtx);
if (s != 0)
quit("pthread_mutex_lock",s);
avail++; /* Let consumer know another unit is available */
s = pthread_mutex_unlock(&mtx);
if (s != 0)
quit("pthread_mutex_unlock",s);
}
return NULL;
}
void quit (char *message, int exit_status) {
perror(message);
exit(exit_status);
}
int main(int argc, char *argv[])
{ pthread_t tid;
typedef enum { FALSE, TRUE } Boolean;
int s, j;
int totRequired; /* Total number of units that all threads will produce */
int numConsumed; /* Total units so far consumed */
Boolean done;
time_t t;
t = time(NULL);
/* Create all threads */
totRequired = 0;
for (j = 1; j < argc; j++) {
totRequired += atoi(argv[j]);
s = pthread_create(&tid, NULL, threadFunc, argv[j]);
if (s != 0)
quit("pthread_create",s);
} /* Use a polling loop to check for available units */
Synchronization - II
6
numConsumed = 0;
done = FALSE;
for (;;) {
s = pthread_mutex_lock(&mtx);
if (s != 0)
quit("pthread_mutex_lock",s);
while (avail > 0) { /* Consume all available units */
/* Do something with produced unit */
numConsumed ++;
avail--;
printf("T=%ld: numConsumed=%d\n", (long) (time(NULL) - t), numConsumed);
done = numConsumed >= totRequired;
}
s = pthread_mutex_unlock(&mtx);
if (s != 0)
quit("pthread_mutex_unlock",s);
if (done)
break;
/* Perhaps do other work here that does not require mutex lock */
}
exit(0);
}
